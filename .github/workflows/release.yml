name: Release builds

on:
  release:
    types: [published]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact: linux
          - os: windows-latest
            artifact: windows
          - os: macos-latest
            artifact: macos
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build renderer (Next)
        run: npx --yes next build ./renderer

      - name: Build Electron app (nextron -> electron-builder)
        run: npm run build

      - name: Produce portable zip (electron-builder)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_SIGNATURES: 'true'
        run: |
          # produce a portable zip for the current platform to avoid DMG signing issues
          npx --yes electron-builder --mac zip --win nsis --linux AppImage --publish never || true

      - name: Upload build artifacts from dist
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.artifact }}
          path: dist/*.zip

  publish:
    name: Attach artifacts to release and update notes
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Upload artifacts to GitHub Release and update release notes
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const path = require('path')
            const releaseId = context.payload.release.id
            const files = fs.readdirSync(path.join(process.cwd(), 'artifacts')).filter(f => f.endsWith('.zip'))
            if (files.length === 0) {
              core.info('No artifacts found to upload')
              return
            }
            const links = []
            for (const file of files) {
              const filePath = path.join(process.cwd(), 'artifacts', file)
              const data = fs.readFileSync(filePath)
              const res = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: file,
                data,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': data.length
                }
              })
              links.push(`- [${file}](${res.data.browser_download_url})`)
            }

            // Append links to release body
            const current = (context.payload.release.body) ? context.payload.release.body : ''
            const addition = `\n\n## Build artifacts\n${links.join('\n')}`
            const updatedBody = current + addition
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: updatedBody
            })
